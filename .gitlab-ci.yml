image: debian

stages:
  - build:backend
  - build:frontend
  - test
  - deploy

# templates
.rust: &rust
  image: rust
  before_script:
    - &rust-restore-cache stat cargo && (rm -r /usr/local/cargo; mv cargo /usr/local/cargo)
  after_script:
    - mv /usr/local/cargo cargo
  cache:
    key: rust
    paths:
      - target/
      - cargo/

.node: &node
  image: node
  cache:
    key: npm
    paths:
      - web/node_modules

# building the backend just to have it in cache
build-rust:
  <<: *rust
  stage: build:backend
  script:
    - cargo build --release

# testing the backend the moment it's built
test-backend:
  <<: *rust
  stage: test
  needs:
    - build-rust
  script:
    - cargo test

# builds wasm package once the backend is built
build-wasm:
  <<: *rust
  stage: build:backend
  needs:
    - build-rust
  before_script:
    - *rust-restore-cache
    - wasm-pack --version || cargo install wasm-pack
  script:
    - wasm-pack build --target web --out-dir web/pkg
  artifacts:
    untracked: false
    expire_in: "1 day"
    paths:
      - web/pkg/

# installs npm dependencies;
# note: wasm package is also dependency so this job
# will be run once all wasm stuff is generated
build-npm:
  <<: *node
  stage: build:frontend
  needs:
    - build-wasm
  script:
    - cd web
    - npm install

# creates a production build of the web interface
# and deploys it to gitlab pages
deploy-pages:
  <<: *node
  stage: deploy
  needs:
    - build-npm
  script:
    - cd web
    - npm run build
    - mv build ../public
    - cd ../
  artifacts:
    paths:
      - public/
